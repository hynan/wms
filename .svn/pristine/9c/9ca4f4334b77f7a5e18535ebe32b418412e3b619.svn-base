require('./check-versions')()

var config = require('../config')
if (!process.env.NODE_ENV) {
  process.env.NODE_ENV = JSON.parse(config.dev.env.NODE_ENV)
}

var opn = require('opn')
var path = require('path')
var cookieParser = require('cookie-parser')
var express = require('express')
var webpack = require('webpack')
var proxyMiddleware = require('http-proxy-middleware')
var webpackConfig = process.env.NODE_ENV === 'testing'
  ? require('./webpack.prod.conf')
  : require('./webpack.dev.conf')

// default port where dev server listens for incoming traffic
var port = process.env.PORT || config.dev.port
// automatically open browser, if not set will be false
var autoOpenBrowser = !!config.dev.autoOpenBrowser
// Define HTTP proxies to your custom API backend
// https://github.com/chimurai/http-proxy-middleware
var proxyTable = config.dev.proxyTable

var app = express()
app.use(cookieParser())
var compiler = webpack(webpackConfig)

var devMiddleware = require('webpack-dev-middleware')(compiler, {
  publicPath: webpackConfig.output.publicPath,
  quiet: true
})

var hotMiddleware = require('webpack-hot-middleware')(compiler, {
  log: () => {}
})
// force page reload when html-webpack-plugin template changes
compiler.plugin('compilation', function (compilation) {
  compilation.plugin('html-webpack-plugin-after-emit', function (data, cb) {
    hotMiddleware.publish({ action: 'reload' })
    cb()
  })
})

// proxy api requests
// Object.keys(proxyTable).forEach(function (context) {
//   var options = proxyTable[context]
//   if (typeof options === 'string') {
//     options = { target: options }
//   }
//   app.use(proxyMiddleware(options.filter || context, options))
// })


var options = {
  target: 'http://localhost:8470', // target host
  onProxyReq:onProxyReq,
  changeOrigin: true,          // needed for virtual hosted sites,
  pathRewrite: {'^/ys-web-wms' : '/ys-web-wms'}
};
// var options2 = {
//   target: 'http://192.168.168.217:8080', // target host
//   onProxyReq:onProxyReq,
//   changeOrigin: true,          // needed for virtual hosted sites,
//   pathRewrite: {'^/attaches' : '/attaches'}
// };
function onProxyReq(proxyReq, req, res) {
  // add custom header to request
  var sessionId = req.cookies.JSESSIONID
  proxyReq.setHeader('Cookie', 'JSESSIONID='+sessionId+'; jeesz_token=dBXUCFu%2BCjZqUctAwJBIN2MPDgEbSYJxU5lV84SOXQipEZwmiYqKVNb%2F3BzTfc1lgO%2BzfawP634%3D%7E_%7E44cc3ezB0iwge6aZXPQQTrAbAKEs05ernPg3eP4z1Ir29O9x0yAtTw%3D%3D_ys-web-purchms; token=0d76d0e632054abf901e3f2c684c6257');
  //proxyReq.setHeader('Host','jeesz.cn:8080');
  // or log the req
}

var apiProxy = proxyMiddleware("/ys-web-wms",options);
// var apiProxy2 = proxyMiddleware("/attaches",options2);


app.use(apiProxy);
// app.use(apiProxy2);

app.get("/set_cookie",function(req,res){
  var sessionid = req.query.JSESSIONID;
  res.cookie("JSESSIONID", sessionid);
  console.log("hahahahahah")
  res.redirect("/#/receivingInspection");
});


// handle fallback for HTML5 history API
app.use(require('connect-history-api-fallback')())

// serve webpack bundle output
app.use(devMiddleware)

// enable hot-reload and state-preserving
// compilation error display
app.use(hotMiddleware)

// serve pure static assets
var staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)
app.use(staticPath, express.static('./static'))

var uri = 'http://localhost:' + port

var _resolve
var readyPromise = new Promise(resolve => {
  _resolve = resolve
})

console.log('> Starting dev server...')
devMiddleware.waitUntilValid(() => {
  console.log('> Listening at ' + uri + '\n')
  // when env is testing, don't need open it
  if (autoOpenBrowser && process.env.NODE_ENV !== 'testing') {
    opn(uri)
  }
  _resolve()
})

var server = app.listen(port)

module.exports = {
  ready: readyPromise,
  close: () => {
    server.close()
  }
}
